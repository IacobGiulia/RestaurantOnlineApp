// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tema3_Restaurant.Data;

#nullable disable

namespace Tema3_Restaurant.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20250515051708_TryingToFixPics")]
    partial class TryingToFixPics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tema3_Restaurant.Models.Allergen", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Gluten"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Lactoza"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Oua"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Telina"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Peste"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Nuci"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Soia"
                        });
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Mic dejun"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Supe/Ciorbe"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Fel principal"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Desert"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Bauturi"
                        });
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.ConfigurationApp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.ToTable("ConfigurationApp");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Key = "ProcentReducereMeniu",
                            Value = "10"
                        },
                        new
                        {
                            ID = 2,
                            Key = "ValoareMinimaTransportGratuit",
                            Value = "100"
                        },
                        new
                        {
                            ID = 3,
                            Key = "CostTransport",
                            Value = "15"
                        },
                        new
                        {
                            ID = 4,
                            Key = "NumarComenziPentruDiscount",
                            Value = "5"
                        },
                        new
                        {
                            ID = 5,
                            Key = "IntervalZilePentruDiscount",
                            Value = "30"
                        },
                        new
                        {
                            ID = 6,
                            Key = "ProcentDiscountComenziMultiple",
                            Value = "5"
                        },
                        new
                        {
                            ID = 7,
                            Key = "CantitateMinimaPreparat",
                            Value = "5"
                        });
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Menu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.MenuProduct", b =>
                {
                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("MenuID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("MenuProduct");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("EstimatedDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ProductsPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("PortionQuantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Available = true,
                            CategoryID = 1,
                            Name = "Omleta",
                            PortionQuantity = 250m,
                            Price = 20.00m,
                            TotalQuantity = 3500m
                        },
                        new
                        {
                            ID = 2,
                            Available = true,
                            CategoryID = 1,
                            Name = "Clatite",
                            PortionQuantity = 300m,
                            Price = 30.00m,
                            TotalQuantity = 6000m
                        },
                        new
                        {
                            ID = 3,
                            Available = true,
                            CategoryID = 1,
                            Name = "Cascaval Pane",
                            PortionQuantity = 150m,
                            Price = 15.50m,
                            TotalQuantity = 7500m
                        },
                        new
                        {
                            ID = 4,
                            Available = true,
                            CategoryID = 2,
                            Name = "Ciorba de perisoare",
                            PortionQuantity = 300m,
                            Price = 10.00m,
                            TotalQuantity = 3000m
                        },
                        new
                        {
                            ID = 5,
                            Available = true,
                            CategoryID = 2,
                            Name = "Supa de galuste",
                            PortionQuantity = 300m,
                            Price = 20.50m,
                            TotalQuantity = 3000m
                        },
                        new
                        {
                            ID = 6,
                            Available = true,
                            CategoryID = 2,
                            Name = "Ciorba de burta",
                            PortionQuantity = 300m,
                            Price = 15.50m,
                            TotalQuantity = 3000m
                        },
                        new
                        {
                            ID = 7,
                            Available = true,
                            CategoryID = 3,
                            Name = "Piept de pui la gratar",
                            PortionQuantity = 200m,
                            Price = 15.00m,
                            TotalQuantity = 1000m
                        },
                        new
                        {
                            ID = 8,
                            Available = true,
                            CategoryID = 3,
                            Name = "Pulpe de pui",
                            PortionQuantity = 200m,
                            Price = 15.50m,
                            TotalQuantity = 2000m
                        },
                        new
                        {
                            ID = 9,
                            Available = true,
                            CategoryID = 3,
                            Name = "Burger de vita",
                            PortionQuantity = 500m,
                            Price = 30.00m,
                            TotalQuantity = 5000m
                        },
                        new
                        {
                            ID = 10,
                            Available = true,
                            CategoryID = 3,
                            Name = "Pastrav afumat",
                            PortionQuantity = 300m,
                            Price = 40.00m,
                            TotalQuantity = 4000m
                        },
                        new
                        {
                            ID = 11,
                            Available = true,
                            CategoryID = 3,
                            Name = "Cartofi prajiti",
                            PortionQuantity = 200m,
                            Price = 10.00m,
                            TotalQuantity = 8000m
                        },
                        new
                        {
                            ID = 12,
                            Available = true,
                            CategoryID = 3,
                            Name = "Sarmale",
                            PortionQuantity = 350m,
                            Price = 35.00m,
                            TotalQuantity = 6000m
                        },
                        new
                        {
                            ID = 13,
                            Available = true,
                            CategoryID = 3,
                            Name = "Mamaliga",
                            PortionQuantity = 200m,
                            Price = 15.50m,
                            TotalQuantity = 4000m
                        },
                        new
                        {
                            ID = 14,
                            Available = true,
                            CategoryID = 4,
                            Name = "Inghetata",
                            PortionQuantity = 150m,
                            Price = 20.00m,
                            TotalQuantity = 3000m
                        },
                        new
                        {
                            ID = 15,
                            Available = true,
                            CategoryID = 4,
                            Name = "Papanasi",
                            PortionQuantity = 250m,
                            Price = 35.00m,
                            TotalQuantity = 5000m
                        },
                        new
                        {
                            ID = 16,
                            Available = true,
                            CategoryID = 4,
                            Name = "Tarta cu fructe",
                            PortionQuantity = 200m,
                            Price = 20.00m,
                            TotalQuantity = 4000m
                        },
                        new
                        {
                            ID = 17,
                            Available = true,
                            CategoryID = 5,
                            Name = "Fanta",
                            PortionQuantity = 100m,
                            Price = 5.00m,
                            TotalQuantity = 3000m
                        },
                        new
                        {
                            ID = 18,
                            Available = true,
                            CategoryID = 5,
                            Name = "Pepsi",
                            PortionQuantity = 100m,
                            Price = 5.00m,
                            TotalQuantity = 3000m
                        },
                        new
                        {
                            ID = 19,
                            Available = true,
                            CategoryID = 5,
                            Name = "Apa plata",
                            PortionQuantity = 100m,
                            Price = 3.00m,
                            TotalQuantity = 3000m
                        },
                        new
                        {
                            ID = 20,
                            Available = true,
                            CategoryID = 5,
                            Name = "Espresso",
                            PortionQuantity = 100m,
                            Price = 10.00m,
                            TotalQuantity = 3000m
                        });
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.ProductAllergen", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("AllergenID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "AllergenID");

                    b.HasIndex("AllergenID");

                    b.ToTable("ProductAllergen");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.ProductImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Path = "C:\\Users\\giuli\\Documents\\MVP\\Tema3-Restaurant\\Tema3-Restaurant\\Pics\\omleta.jpg",
                            ProductID = 1
                        });
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Adresa restaurant",
                            Email = "alexandruionescu@restaurant.com",
                            FirstName = "Alexandru",
                            LastName = "Ionescu",
                            Password = "admin123",
                            Phone = "07630019099",
                            Role = "Angajat"
                        },
                        new
                        {
                            ID = 2,
                            Address = "Str. Eroilor 30A",
                            Email = "mariapopescu@email.com",
                            FirstName = "Maria",
                            LastName = "Popescu",
                            Password = "maria123",
                            Phone = "07123456789",
                            Role = "Client"
                        },
                        new
                        {
                            ID = 3,
                            Address = "Str. Garii 28B",
                            Email = "giuliaiacob@email.com",
                            FirstName = "Giulia",
                            LastName = "Iacob",
                            Password = "giulia123",
                            Phone = "0768300292",
                            Role = "Client"
                        },
                        new
                        {
                            ID = 4,
                            Address = "Adresa restaurant",
                            Email = "vladachim@restaurant.com",
                            FirstName = "Vlad",
                            LastName = "Achim",
                            Password = "admin123",
                            Phone = "07856321000",
                            Role = "Angajat"
                        });
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Menu", b =>
                {
                    b.HasOne("Tema3_Restaurant.Models.Category", "Category")
                        .WithMany("Menus")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.MenuProduct", b =>
                {
                    b.HasOne("Tema3_Restaurant.Models.Menu", "Menu")
                        .WithMany("MenuProducts")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tema3_Restaurant.Models.Product", "Product")
                        .WithMany("MenuProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Order", b =>
                {
                    b.HasOne("Tema3_Restaurant.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.OrderItem", b =>
                {
                    b.HasOne("Tema3_Restaurant.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Product", b =>
                {
                    b.HasOne("Tema3_Restaurant.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.ProductAllergen", b =>
                {
                    b.HasOne("Tema3_Restaurant.Models.Allergen", "Allergen")
                        .WithMany("ProductAllergens")
                        .HasForeignKey("AllergenID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tema3_Restaurant.Models.Product", "Product")
                        .WithMany("ProductAllergens")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergen");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.ProductImage", b =>
                {
                    b.HasOne("Tema3_Restaurant.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Allergen", b =>
                {
                    b.Navigation("ProductAllergens");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Category", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Menu", b =>
                {
                    b.Navigation("MenuProducts");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("MenuProducts");

                    b.Navigation("ProductAllergens");
                });

            modelBuilder.Entity("Tema3_Restaurant.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
